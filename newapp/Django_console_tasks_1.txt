'top
1.      Создать двух пользователей (с помощью метода User.objects.create_user('username')).
	U1 = User.objects.create_user(username=’Piter’)
	U2 = User.objects.create_user(username=’Tom’)

2.	Создать два объекта модели Author, связанные с пользователями.
	Author.objects.create(authorUser=u1)
	Проверка имени автора:
	>>> Author.objects.get(id=1).authorUser
	<User: Piter>
	
	Author.objects.create(authorUser=u2)
	Проверка имени автора:
	>>> Author.objects.get(id=2).authorUser
	<User: Tom>

3.	Добавить 4 категории в модель Category
	Category.objects.create(name=”IT”)
	Проверка первой категории:
	>>> Category.objects.get(id=1).name
	'IT'
	
	Category.objects.create(name=”Sport”)
	Category.objects.create(name=”Art”)
	Category.objects.create(name=”Politicst”

4.	Добавить 2 статьи и 1 новость.
	>>> Post.objects.create(author=Author.objects.get(pk=1), categoryType='AR', title='someARtitle', text='someARtext')
	>>> Post.objects.get(id=1).title
	'someARtitle'

	>>> Post.objects.create(author=Author.objects.get(pk=2), categoryType='AR', title='someARtitle2', text='someARtext2'
	>>> Post.objects.get(id=2).title
	'someARtitle2'

	>>> Post.objects.create(author=Author.objects.get(pk=1), categoryType='NW', title='someNWtitle', text='someNWtext')
	>>> Post.objects.get(id=3).text
	'someNWtext'

5.	Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
	1. Object Post with categoryType attribute =ARTICLE and  pk=1
	PostCategory.objects.create(postThrough=Post.objects.get(pk=1), categoryThrough=Category.objects.get(name='Sport'))
	PostCategory.objects.create(postThrough=Post.objects.get(pk=1), categoryThrough=Category.objects.get(name='Politics'))
	PostCategory.objects.create(postThrough=Post.objects.get(pk=1), categoryThrough=Category.objects.get(name='Music'))
	
	2. Object Post with categoryType attribute=ARTICLE and pk=2
	Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))

	3. Object Post with categoryType=NEWS  and pk=3
	>>> PostCategory.objects.create(postThrough=Post.objects.get(pk=3),categoryThrough=Category.objects.get(name='Art'))
	
	Проверка:

	 1. >>> Post.objects.get(id=1).postCategory.all()-> для обьекта Post c id=1 и  ARTICLE 
	<QuerySet [<Category: id=4 name=Politics>, <Category: id=2 name=Sport>, <Category: id=5 name=Music>]>

	2. >>> Post.objects.get(id=2).postCategory.all()-> для обьекта Post c id=2 и categoryType ARTICLE 
	<QuerySet [<Category: id=1 name=IT>]>
	
	3.>>> Post.objects.get(id=3).postCategory.all()-> для обьекта Post c id=3 и categoryType NEWS
	<QuerySet [<Category: id=3 name=Art>]>

6.	Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
	
	1. Коментарий автора, который предствлен как обьект класса Author со значением атрибута authorUser:’Piter’ ,к статье с categoryType=ARTICLE  и c id=1
	>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text = 'anytextbyauthor')
	Проверка:
	<Comment: Comment object (1)>

	Проверка имени автора  комментария к этому посту:
	>>> Comment.objects.get(id=1).commentUser
	<User: Piter>

	2.Коментарий пользователя, т.е.юзера (user), который предствлен как обьект класса User со значением поля username :’Piter’ ,к статье с categoryType=ARTICLE  и c id=2
	>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=User.objects.get(id=1), text = 'anytextbyuser')
	Проверка:
	<Comment: Comment object (2)>

	Проверка имени автора  комментария к этому посту:
	>>> Comment.objects.get(id=2).commentUser
	<User: Piter>

	3.Коментарий пользователя, т.е.юзера (user), который предствлен как обьект класса User со значением поля username :’Piter’ ,к новости с categoryType=NEWS  и c id=3
	>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=1), text = 'anytextbyuser')
	
	Проверка имени автора  комментария к этому посту:
	>>> Comment.objects.get(id=3).commentUser
	<User: Piter>
	4.Коментарий автора, который предствлен как обьект класса Author со значением атрибута authorUser:’Piter’ ,к новости с categoryType=NEWS  и c id=3
	>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text = 'anytextbyauthor')

	Проверка имени автора  комментария к этому посту:
	>>> Comment.objects.get(id=4).commentUser
	<User: Piter>
	5.>>> Comment.objects.get(id=5).commentUser 
	news.models.Comment.DoesNotExist: Comment matching query does not exist
	
	6.Проверка имени автора  комментария к этому посту c id=6:
	>>> Comment.objects.get(id=6).commentUser	
	<User: Tom>

7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
	>>>Comment.objects.get(id=1).like()
	
	>>> Comment.objects.get(id=1).rating
	1
	>>>Comment.objects.get(id=2).like()
	>>>Comment.objects.get(id=2).like()
	>>>Comment.objects.get(id=2).like()
	>>>Comment.objects.get(id=2).like()
	>>>Comment.objects.get(id=2).dislike()

	>>> Comment.objects.get(id=2).rating 
	3
	>>>Comment.objects.get(id=3).like()
	>>>Comment.objects.get(id=3).like()
	>>>Comment.objects.get(id=3).like()
	>>>Comment.objects.get(id=3).like()
	>>>Comment.objects.get(id=3).dislike()

	>>> Comment.objects.get(id=3).rating 
	3
	>>>Comment.objects.get(id=4).like()
	>>>Comment.objects.get(id=4).like()
	>>>Comment.objects.get(id=4).like()
	>>>Comment.objects.get(id=4).like()
	>>>Comment.objects.get(id=4).like()

	>>> Comment.objects.get(id=4).rating 
	4
	>>>Comment.objects.get(id=6).like()
	>>> Comment.objects.get(id=6).rating
	1

8.Обновить рейтинги пользователей.
	>>> Author.objects.get(id=1)
	Проверка
	<Author: Author object (1)> 
	>>> a=Author.objects.get(id=1)
	>>> a.update_rating()

	>>> Author.objects.get(id=1).ratingAuthor
	22

	>>> Author.objects.get(id=2)
	Проверка
	<Author: Author object (2)>
	>>> a2=Author.objects.get(id=2)
	>>>a2.update_rating()
	>>> Author.objects.get(id=2).ratingAuthor
	10

9.Вывести, username и рейтинг лучшего пользователя,применяя сортировку и возвращая поля первого объекта.(Так как метод update_rating реализуется  для модели Author,имеющей только поле authorUser, то  предполагается,что здесь имеются ввиду только пользователи-авторы)  
	>>> a=Author.objects.order_by('-ratingAuthor')[:1]
	>>> for i in a:
...     i.ratingAuthor
...     i.authorUser.username
...
22
'Piter'


10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.


	Со всеми необходимыми полями, кроме превью:

	 >>> Post.objects.order_by('-rating').values('dateCreation','author__authorUser__username','rating','text','title')[0]
	{'dateCreation': datetime.datetime(2022, 9, 2, 13, 1, 36, 833082, tzinfo=datetime.timezone.utc), 'author__authorUser__username': 'Tom', 'rating': 3, 'text': 'someARtext2', 'title': 'someARtitle2'}
	
	Вывод превью:
	>>> p1 = Post.objects.order_by('-rating')[0]
	>>> p1.preview()
	'Текст  про IT длиной более 130 знаков: Данный пример с методом save() прост, но имеет свой недостаток, он выполняет обновлен...'
	

	

11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

	
	>>>top_post = Post.objects.order_by('-rating')[0]
	>>>top_post.comment_set.all().values('dateCreation', 'commentUser__username', 'rating', 'text')
	<QuerySet [{'dateCreation': datetime.datetime(2022, 9, 4, 11, 32, 44, 87588, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Piter', 'rating': 3, 'text': 'anytextbyuser'}]>


